// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: connections.sql

package db

import (
	"context"
)

const createConnection = `-- name: CreateConnection :exec

INSERT INTO connections (
    uuid, machine_uuid
) VALUES (
    $1, $2
)
`

type CreateConnectionParams struct {
	Uuid        string
	MachineUuid string
}

// CREATE TABLE connections (
//
//	uuid TEXT PRIMARY KEY,
//	machine_uuid TEXT NOT NULL REFERENCES machines(uuid) ,
//	created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
//	last_updated TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
//
// );
func (q *Queries) CreateConnection(ctx context.Context, arg CreateConnectionParams) error {
	_, err := q.db.Exec(ctx, createConnection, arg.Uuid, arg.MachineUuid)
	return err
}

const deleteConnection = `-- name: DeleteConnection :exec
DELETE FROM connections 
WHERE uuid = $1
`

func (q *Queries) DeleteConnection(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deleteConnection, uuid)
	return err
}

const findMachine = `-- name: FindMachine :one
SELECT uuid, machine_uuid, created_at, last_updated FROM connections
WHERE uuid = $1
`

func (q *Queries) FindMachine(ctx context.Context, uuid string) (Connection, error) {
	row := q.db.QueryRow(ctx, findMachine, uuid)
	var i Connection
	err := row.Scan(
		&i.Uuid,
		&i.MachineUuid,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getConnections = `-- name: GetConnections :many
SELECT uuid, machine_uuid, created_at, last_updated FROM connections
`

func (q *Queries) GetConnections(ctx context.Context) ([]Connection, error) {
	rows, err := q.db.Query(ctx, getConnections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Connection
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.Uuid,
			&i.MachineUuid,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
