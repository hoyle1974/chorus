// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: machines.sql

package db

import (
	"context"
)

const createLeader = `-- name: CreateLeader :exec
INSERT INTO machine_type_leader (
    machine_uuid
) VALUES (
    $1
)
`

func (q *Queries) CreateLeader(ctx context.Context, machineUuid string) error {
	_, err := q.db.Exec(ctx, createLeader, machineUuid)
	return err
}

const createMachine = `-- name: CreateMachine :exec
INSERT INTO machines (
    uuid, machine_type
) VALUES (
    $1, $2
)
`

type CreateMachineParams struct {
	Uuid        string
	MachineType string
}

func (q *Queries) CreateMachine(ctx context.Context, arg CreateMachineParams) error {
	_, err := q.db.Exec(ctx, createMachine, arg.Uuid, arg.MachineType)
	return err
}

const deleteLeader = `-- name: DeleteLeader :exec
DELETE FROM machine_type_leader
WHERE machine_uuid = $1
`

func (q *Queries) DeleteLeader(ctx context.Context, machineUuid string) error {
	_, err := q.db.Exec(ctx, deleteLeader, machineUuid)
	return err
}

const deleteMachine = `-- name: DeleteMachine :exec
DELETE FROM machines
WHERE uuid = $1
`

func (q *Queries) DeleteMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deleteMachine, uuid)
	return err
}

const getLeaderForType = `-- name: GetLeaderForType :one
SELECT machines.uuid                                                                                                                                                                            
FROM machine_type_leader, machines                                                                                                                                                                            
WHERE machines.machine_type = $1                                                                                                                                                                         
AND machine_type_leader.machine_uuid = machines.uuid
`

func (q *Queries) GetLeaderForType(ctx context.Context, machineType string) (string, error) {
	row := q.db.QueryRow(ctx, getLeaderForType, machineType)
	var uuid string
	err := row.Scan(&uuid)
	return uuid, err
}

const getMachine = `-- name: GetMachine :one
SELECT uuid, machine_type, created_at, last_updated FROM machines 
WHERE uuid=$1
`

func (q *Queries) GetMachine(ctx context.Context, uuid string) (Machine, error) {
	row := q.db.QueryRow(ctx, getMachine, uuid)
	var i Machine
	err := row.Scan(
		&i.Uuid,
		&i.MachineType,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getMachineLeaderCountByType = `-- name: GetMachineLeaderCountByType :one
SELECT COUNT(*) 
FROM machine_type_leader, machines                                                                                                                                                                            
WHERE machines.machine_type = $1                                                                                                                                                                         
AND machine_type_leader.machine_uuid = machines.uuid
`

func (q *Queries) GetMachineLeaderCountByType(ctx context.Context, machineType string) (int64, error) {
	row := q.db.QueryRow(ctx, getMachineLeaderCountByType, machineType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMachines = `-- name: GetMachines :many
SELECT uuid, machine_type, created_at, last_updated FROM machines
`

func (q *Queries) GetMachines(ctx context.Context) ([]Machine, error) {
	rows, err := q.db.Query(ctx, getMachines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.Uuid,
			&i.MachineType,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setMachineAsLeader = `-- name: SetMachineAsLeader :exec
INSERT INTO machine_type_leader (
    machine_uuid
) VALUES (
    $1
)
`

func (q *Queries) SetMachineAsLeader(ctx context.Context, machineUuid string) error {
	_, err := q.db.Exec(ctx, setMachineAsLeader, machineUuid)
	return err
}

const touchMachine = `-- name: TouchMachine :exec
UPDATE machines 
SET last_updated = now()
WHERE uuid = $1
`

func (q *Queries) TouchMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, touchMachine, uuid)
	return err
}

const updateMachine = `-- name: UpdateMachine :exec
UPDATE machines
SET last_updated = NOW()
WHERE uuid = $1
`

func (q *Queries) UpdateMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, updateMachine, uuid)
	return err
}
