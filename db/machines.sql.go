// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: machines.sql

package db

import (
	"context"
)

const createMachine = `-- name: CreateMachine :exec
INSERT INTO machines (
    uuid, monitor
) VALUES (
    $1, false
)
`

func (q *Queries) CreateMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, createMachine, uuid)
	return err
}

const deleteMachine = `-- name: DeleteMachine :exec
DELETE FROM machines
WHERE uuid = $1
`

func (q *Queries) DeleteMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deleteMachine, uuid)
	return err
}

const getMachines = `-- name: GetMachines :many
SELECT uuid, monitor, created_at, last_updated FROM machines
`

func (q *Queries) GetMachines(ctx context.Context) ([]Machine, error) {
	rows, err := q.db.Query(ctx, getMachines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.Uuid,
			&i.Monitor,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setMachineAsMonitor = `-- name: SetMachineAsMonitor :exec
UPDATE machines 
SET monitor=true
WHERE uuid = $1
`

func (q *Queries) SetMachineAsMonitor(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, setMachineAsMonitor, uuid)
	return err
}

const updateMachine = `-- name: UpdateMachine :exec
UPDATE machines
SET last_updated = NOW()
WHERE uuid = $1
`

func (q *Queries) UpdateMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, updateMachine, uuid)
	return err
}
