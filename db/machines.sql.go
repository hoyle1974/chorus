// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: machines.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMachine = `-- name: CreateMachine :exec
INSERT INTO machines (
    uuid, monitor
) VALUES (
    $1, false
)
`

func (q *Queries) CreateMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, createMachine, uuid)
	return err
}

const deleteMachine = `-- name: DeleteMachine :exec
DELETE FROM machines
WHERE uuid = $1
`

func (q *Queries) DeleteMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, deleteMachine, uuid)
	return err
}

const getExpiredMachines = `-- name: GetExpiredMachines :many
SELECT uuid FROM machines
WHERE last_updated < NOW() - INTERVAL $1 second
`

func (q *Queries) GetExpiredMachines(ctx context.Context, dollar_1 pgtype.Interval) ([]string, error) {
	rows, err := q.db.Query(ctx, getExpiredMachines, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var uuid string
		if err := rows.Scan(&uuid); err != nil {
			return nil, err
		}
		items = append(items, uuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMachines = `-- name: GetMachines :many
SELECT uuid, monitor, created_at, last_updated FROM machines
`

func (q *Queries) GetMachines(ctx context.Context) ([]Machine, error) {
	rows, err := q.db.Query(ctx, getMachines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.Uuid,
			&i.Monitor,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonitor = `-- name: GetMonitor :one
SELECT uuid FROM machines
WHERE monitor = true
`

func (q *Queries) GetMonitor(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getMonitor)
	var uuid string
	err := row.Scan(&uuid)
	return uuid, err
}

const setMachineAsMonitor = `-- name: SetMachineAsMonitor :exec
UPDATE machines 
SET monitor=true
WHERE uuid = $1
`

func (q *Queries) SetMachineAsMonitor(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, setMachineAsMonitor, uuid)
	return err
}

const updateMachine = `-- name: UpdateMachine :exec
UPDATE machines
SET last_updated = NOW()
WHERE uuid = $1
`

func (q *Queries) UpdateMachine(ctx context.Context, uuid string) error {
	_, err := q.db.Exec(ctx, updateMachine, uuid)
	return err
}
